迭代器
    可以直接作用于for循环的数据类型：
    1.集合数据类型，如list、tuple、dict、set、str等；
    2.generator，包括生成器和带yield的generator function。
    这些可以直接作用于for循环的对象统称为迭代对象：Iterable。
    可以使用isinstance()判断一个对象是否是Iterable对象：


   from collection import Iterable

  isinstance([],Iterable)
  True

  isinstance({},Iterable)
  True

  isinstance('abc',Iterable)
  True

  isinstance((x for x in range(10)),Iterable)
  True

  isinstance(100,Iterable)
  False

  而生成器不但可以作用于for循环，还可以使next()函数不断调用并返回下一值，
  直到最后抛出StopIteration错误表示无法继续返回下一个值了。

  可以被next()函数调用并不断返回下一个值的对象成为迭代器：Iterator
  可以使用isinstance()判断一个对象是否是Iterator对象：
  isinstance([],Iterator)
  False

  isinstance({},Iterator)
  False

  isinstance('abc',Iterator)
  False

  isinstance((x for x in range(10)),Iterator)
  True

 集合数据类型如list、tuple、dict、str等是Iterable但不是Iterator，不过可以通过
 iter()函数获得一个Iterator对象。

 for循环本质就是通过不断调用next()函数实现的：
    for x in [1,2,3,4,5]:
        pass
 实际上完全等价于：

    it = iter([1,2,3,4,5])
    while True:
        try:
        x = next(it)
    except StopIteration:
        break